<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Request for Comments on PHP RFC&#39;s</title>
    <link>https://phpinternal.github.io/wiki/rfc/</link>
    <description>Recent content in Request for Comments on PHP RFC&#39;s</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	<atom:link href="https://phpinternal.github.io/wiki/rfc/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Union types</title>
      <link>https://phpinternal.github.io/wiki/rfc/union_types_v2/</link>
      <pubDate>Mon, 02 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>https://phpinternal.github.io/wiki/rfc/union_types_v2/</guid>
      <description>Introduction A &amp;ldquo;union type&amp;rdquo; accepts values of multiple different types, rather than a single one. PHP already supports two special union types:
 Type or null, using the special ?Type syntax. array or Traversable, using the special iterable type.  However, arbitrary union types are currently not supported by the language. Instead, phpdoc annotations have to be used, such as in the following example:
class Number { /** * @var int|float $number */ private $number; /** * @param int|float $number */ public function setNumber($number) { $this-&amp;gt;number = $number; } /** * @return int|float */ public function getNumber() { return $this-&amp;gt;number; } }  The statistics section shows that the use of union types is indeed pervasive in the open-source ecosystem, as well as PHP&amp;rsquo;s own standard library.</description>
    </item>
    
  </channel>
</rss>